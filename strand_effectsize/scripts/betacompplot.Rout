
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> library(GGally)

Attaching package: 'GGally'

The following objects are masked _by_ '.GlobalEnv':

    ggally_cor, ggally_points

> 
> load("/panfs/panasas01/shared-godmc/meta-analysis/betacomparison/betacomp.Robj")
> 
> id<-do.call("rbind",coh)
> id<-unique(data.frame(ID=id$ID))
> length(id[,1])
[1] 1935027
> #1935027
> beta.out<-id
> for (i in 1:length(coh)){
+ cohort<-coh[[i]]
+ m<-match(id$ID,cohort$ID)
+ beta<-data.frame(BETA=cohort$BETA[m])
+ 
+ n<-as.character(cohort[1,1])
+ cat(n,"\n")
+ n<-gsub("Leiden_Longevity_Study","LLS",n)
+ n<-gsub("Phase1SCZ","SCZ1",n)
+ n<-gsub("Phase2SCZ","SCZ2",n)
+ n<-strsplit(n,split="_")
+ names(beta)<-n[[1]][2]
+ beta.out<-cbind(beta.out,beta)
+ }
amcrae_BSGS 
amcrae_LBC21 
amcrae_LBC36 
csoriano_BASICMAR 
ecarnero_TwinsUK 
ehannon_Phase1SCZ 
ehannon_Phase2SCZ 
emelen_BAMSE 
epzjlm_ARIES 
gmatullo_EPICOR 
jholloway_IOW3g 
jkaprio_FTC 
jperry_InterAct 
mbustamante_INMA 
rluijk_LLS 
> 
> #test<-beta.out[1:10000,]
> test<-beta.out
> 
> 
> ggally_cor <- function(data, mapping, corAlignPercent = 0.6, ...){
+ 
+   # xVar <- data[,as.character(mapping$x)]
+   # yVar <- data[,as.character(mapping$y)]
+   # x_bad_rows <- is.na(xVar)
+   # y_bad_rows <- is.na(yVar)
+   # bad_rows <- x_bad_rows | y_bad_rows
+   # if (any(bad_rows)) {
+   #   total <- sum(bad_rows)
+   #   if (total > 1) {
+   #     warning("Removed ", total, " rows containing missing values")
+   #   } else if (total == 1) {
+   #     warning("Removing 1 row that contained a missing value")
+   #   }
+   #
+   #   xVar <- xVar[!bad_rows]
+   #   yVar <- yVar[!bad_rows]
+   # }
+ 
+   # mapping$x <- mapping$y <- NULL
+ 
+   xCol <- as.character(mapping$x)
+   yCol <- as.character(mapping$y)
+   colorCol <- as.character(mapping$colour)
+ 
+   if(length(colorCol) > 0) {
+     if(colorCol %in% colnames(data)) {
+       rows <- complete.cases(data[,c(xCol,yCol,colorCol)])
+     } else {
+       rows <- complete.cases(data[,c(xCol,yCol)])
+     }
+   } else {
+     rows <- complete.cases(data[,c(xCol,yCol)])
+   }
+ 
+   if(any(!rows)) {
+     total <- sum(!rows)
+     if (total > 1) {
+       warning("Removed ", total, " rows containing missing values")
+     } else if (total == 1) {
+       warning("Removing 1 row that contained a missing value")
+     }
+   }
+   data <- data[rows, ]
+   xVal <- data[,xCol]
+   yVal <- data[,yCol]
+ 
+ 
+   if(length(names(mapping)) > 0){
+     for(i in length(names(mapping)):1){
+       # find the last value of the aes, such as cyl of as.factor(cyl)
+       tmp_map_val <- as.character(mapping[names(mapping)[i]][[1]])
+       if(tmp_map_val[length(tmp_map_val)] %in% colnames(data))
+         mapping[names(mapping)[i]] <- NULL
+ 
+       if(length(names(mapping)) < 1){
+         mapping <- NULL
+         break;
+       }
+     }
+   }
+ 
+ 
+   # splits <- str_c(as.character(mapping$group), as.character(mapping$colour), sep = ", ", collapse = ", ")
+   # splits <- str_c(colorCol, sep = ", ", collapse = ", ")
+   final_text <- ""
+   if(length(colorCol) < 1)
+     colorCol <- "ggally_NO_EXIST"
+   # browser()
+   if(colorCol != "ggally_NO_EXIST" && colorCol %in% colnames(data)) {
+ 
+     txt <- str_c("ddply(data, .(", colorCol, "), summarize, ggally_cor = cor(", xCol,", ", yCol,"))[,c('", colorCol, "', 'ggally_cor')]")
+ 
+     con <- textConnection(txt)
+     on.exit(close(con))
+     cord <- eval(parse(con))
+ 
+     # browser()
+     cord$ggally_cor <- signif(as.numeric(cord$ggally_cor), 3)
+ 
+     # put in correct order
+     lev <- levels(data[[colorCol]])
+     ord <- rep(-1, nrow(cord))
+     for(i in 1:nrow(cord)) {
+       for(j in seq_along(lev)){
+         if(identical(as.character(cord[i, colorCol]), as.character(lev[j]))) {
+           ord[i] <- j
+         }
+       }
+     }
+     # print(order(ord[ord >= 0]))
+     # print(lev)
+     cord <- cord[order(ord[ord >= 0]), ]
+ 
+     cord$label <- str_c(cord[[colorCol]], ": ", cord$ggally_cor)
+ 
+     # calculate variable ranges so the gridlines line up
+     xmin <- min(xVal)
+     xmax <- max(xVal)
+     xrange <- c(xmin-.01*(xmax-xmin),xmax+.01*(xmax-xmin))
+     ymin <- min(yVal)
+     ymax <- max(yVal)
+     yrange <- c(ymin-.01*(ymax-ymin),ymax+.01*(ymax-ymin))
+ 
+ 
+     # print(cord)
+     p <- ggally_text(
+       label   = str_c("Cor : ", signif(cor(xVal,yVal),3)),
+       mapping = mapping,
+       xP      = 0.5,
+       yP      = 0.9,
+       xrange  = xrange,
+       yrange  = yrange,
+       color   = "black",
+       ...
+     ) +
+     #element_bw() +
+     theme(legend.position = "none")
+ 
+     xPos <- rep(corAlignPercent, nrow(cord)) * diff(xrange) + min(xrange)
+     yPos <- seq(from = 0.9, to = 0.2, length.out = nrow(cord) + 1) * diff(yrange) + min(yrange)
+     yPos <- yPos[-1]
+     # print(range(yVal))
+     # print(yPos)
+     cordf <- data.frame(xPos = xPos, yPos = yPos, labelp = cord$label)
+     p <- p + geom_text(
+       data=cordf,
+       aes(
+         x = xPos,
+         y = yPos,
+         label = labelp,
+         color = labelp
+       ),
+       hjust = 1,
+       ...
+ 
+     )
+ 
+     p$type <- "continuous"
+     p$subType <- "cor"
+     p
+   } else {
+     # calculate variable ranges so the gridlines line up
+     xmin <- min(xVal)
+     xmax <- max(xVal)
+     xrange <- c(xmin-.01*(xmax-xmin),xmax+.01*(xmax-xmin))
+     ymin <- min(yVal)
+     ymax <- max(yVal)
+     yrange <- c(ymin-.01*(ymax-ymin),ymax+.01*(ymax-ymin))
+ 
+     cor_obj <- cor.test(xVal, yVal)
+     cor_signif <- symnum(cor_obj$p.value, corr = FALSE,
+                cutpoints = c(0, .001, .01, .05, .1, 1),
+                symbols = c("***", "**", "*", ".", " "))
+     cor_text_size <- 1 + 2*abs(cor_obj$estimate)
+     
+     p <- ggally_text(
+       label = paste(
+         signif(cor_obj$estimate, 2),
+         cor_signif,
+         sep="",collapse=""
+       ),
+       mapping,
+       xP=0.5,
+       yP=0.5,
+       xrange = xrange,
+       yrange = yrange,
+       size=cor_text_size,
+       ...
+     ) +
+     #element_bw() +
+     theme(legend.position = "none", 
+           panel.grid.major = element_blank(), 
+           axis.ticks = element_blank(), 
+           panel.border = element_rect(linetype = "dashed", colour = "black", fill=NA))
+ 
+     p$type <- "continuous"
+     p$subType <- "cor"
+     p
+   }
+ }
> ggally_points <- function(data, mapping, ...){
+ 
+   p <- ggplot(data = data, mapping = mapping) + geom_point(...) +
+   #theme(axis.text.x=element_blank()) +
+   scale_y_continuous(limits = c(-3, 3)) +
+   scale_x_continuous(limits = c(-3, 3))
+ 
+   #scale_x_continuous(limits = c(-3, 3)) +
+   #geom_abline(intercept = 0, slope = 1) +
+   #geom_abline(intercept = 0, slope = -1)
+   
+   p$type <- "continuous"
+   p$subType <- "points"
+   p
+ }
> 
> grid.draw.gg <- function(x){
+    print(x)
+ }
> 
> assignInNamespace("ggally_cor", ggally_cor, "GGally")
> assignInNamespace("ggally_points", ggally_points, "GGally")
> 
> p<-ggpairs(
+   test[,2:ncol(test)],
+   upper = list(continuous = "cor"),
+   lower = list(continuous = wrap("points",size=0.2)),
+   diag = list(continuous = wrap('diagAxis', labelSize = 2,gridLabelSize=0)),
+   columnLabels=rep("",ncol(test)-1),
+ 
+   
+ 
+ )
> ggsave(p,file="betacomptest.png")
Saving 7 x 7 in image
There were 50 or more warnings (use warnings() to see the first 50)
> 
> #p<-ggscatmat(test, columns = 2:ncol(test), alpha=0.8)
> #ggsave(p,file="betacomptest2.png")
> #columnLabels=seq(1, ncol(test)-1,1)
> #axisLabels = "internal"
> 
> #print(p, left = 0.2, spacing = 0.03, bottom = 0.1)
> #print(p, leftWidthProportion = 3)
> #print(p, bottomHeightProportion = 1)
> #ggplot(data, aes(x=id, y=value)) + geom_point() + facet_grid(.~variable)
> 
> proc.time()
   user  system elapsed 
606.238   1.879 611.340 
